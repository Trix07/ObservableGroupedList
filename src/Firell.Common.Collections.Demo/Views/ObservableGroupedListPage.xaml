<!-- Copyright (c) Microsoft Corporation and Contributors. -->
<!-- Licensed under the MIT License. -->

<Page
    x:Class="Firell.Common.Collections.Demo.Views.ObservableGroupedListPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:Firell.Common.Collections.Demo.Views"
    mc:Ignorable="d">

    <Page.Resources>
        <CollectionViewSource x:Name="PersonsCollectionViewSource" Source="{x:Bind ViewModel.GroupedPersons.Values, Mode=OneWay}" ItemsPath="Values" IsSourceGrouped="True"/>
    </Page.Resources>

    <Grid RowSpacing="20" Padding="20, 10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Spacing="10">
            <StackPanel Margin="0, 0, 0, 5">
                <TextBlock Text="ObservableGroupedList&lt;TGroupKey, TValueKey, TValue&gt;" Style="{StaticResource TitleTextBlockStyle}"/>
                <TextBlock Text="Firell.Common.Collections" Foreground="Gray"/>
            </StackPanel>

            <RichTextBlock TextWrapping="Wrap" IsTextSelectionEnabled="True">
                <Paragraph>
                    The
                    <Bold>ObservableGroupedList&lt;TGroupKey, TValueKey, TValue&gt;</Bold>
                    type is a custom observable sorted list inheriting from
                    <Bold>ObservableSortedList&lt;TKey, TValue&gt;</Bold>
                    that provide both sorting and grouping support. This is a particulary useful when binding a grouped collection of items to the UI, such as to display a list of people.
                    <LineBreak/>
                </Paragraph>

                <Paragraph>
                    Sorting is done based on the keys, through an
                    <Bold>IComparer&lt;TGroupKey&gt;</Bold>
                    for groups and
                    <Bold>IComparer&lt;TValueKey&gt;</Bold>
                    for items.
                    <LineBreak/>
                </Paragraph>
                
                <Paragraph>
                    To get started bind the
                    <Bold>ObservableGroupedList&lt;TGroupKey, TValueKey, TValue&gt;</Bold>
                    values to a
                    <Bold>CollectionViewSource</Bold>
                    Source property.
                </Paragraph>
            </RichTextBlock>

            <Border Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" CornerRadius="4" Padding="20, 10">
                <ScrollViewer HorizontalScrollMode="Enabled" HorizontalScrollBarVisibility="Auto">
                    <TextBlock Text="&lt;CollectionViewSource Source=&quot;{x:Bind ViewModel.GroupedPersons.Values, Mode=OneWay}&quot; ItemsPath=&quot;Values&quot; IsSourceGrouped=&quot;True&quot;&gt;" IsTextSelectionEnabled="True"/>
                </ScrollViewer>
            </Border>
        </StackPanel>

        <Grid Grid.Row="1" RowSpacing="10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" Text="Sample" Style="{StaticResource TitleTextBlockStyle}"/>

            <Border Grid.Row="1" Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" CornerRadius="4" Padding="20, 10">
                <ListView Grid.Row="1" ItemsSource="{x:Bind PersonsCollectionViewSource.View, Mode=OneWay}" Style="{StaticResource PersonsListView}">
                    <ListView.GroupStyle >
                        <GroupStyle HeaderContainerStyle="{StaticResource StretchGroupContent}" HeaderTemplate="{StaticResource GroupDataTemplate}"/>
                    </ListView.GroupStyle>
                </ListView>
            </Border>
        </Grid>
    </Grid>
</Page>
